
/** 
 *  FOO_BAR HUFF EXERCISE
 *
 *  Majority of ethereum contracts hold logic divide this logic into functions which users can specify and call 
    to execute a particular logic without clashing into the other
 *  
 *  The task is to write within the `MAIN` macro below, huff code that mimics 2 solidity functions. 
 *      - One named `foo()` that simply returns 2,
 *      - the second named `bar()` that simply returns 3.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

 #define function foo() payable returns(uint256)
 #define function bar() payable returns(uint256)

 #define macro FOO() = returns(0) {
    0x02 0x00 mstore  // Store the constant value 2 at memory location 0x00
                      // Stack: [empty] (mstore consumes the top two stack items: value and memory address)

    0x20 0x00 return  // Return 32 bytes starting from memory location 0x00
                      // Stack: [empty] (return consumes the top two stack items: size and start position)
 }

 #define macro BAR() = returns(0) {
    0x03 0x00 mstore  // Store the constant value 3 at memory location 0x00
                      // Stack: [empty] (mstore consumes the top two stack items: value and memory address)

    0x20 0x00 return  // Return 32 bytes starting from memory location 0x00
                      // Stack: [empty] (return consumes the top two stack items: size and start position)
 }

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr

    dup1 __FUNC_SIG(foo) eq foo jumpi
    dup1 __FUNC_SIG(bar) eq bar jumpi

    0x00 0x00 revert

    foo:
        FOO()

    bar:
        BAR()
}