
/** 
 *  MAX_OF_ARRAY HUFF EXERCISE
 *  
 *  In this task, Given an abi encoded array of uint256, return its maximum value. Revert if the array is empty.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function maxOfArray(uint256[]) payable returns(uint256)

#define macro MAX_OF_ARRAY() = takes(0) returns(0) {
    0x44                          // [0x44] 
    calldatasize                  // [calldatasize, 0x44] 
    sub                           // [length] 

    dup1                          // [length, length]
    iszero _revert jumpi          // [length]

    push0                         // [max = 0, length] 
    push0                         // [i = 0, max, length]


    loopStart:
        dup3                      // [length, i, max, length]
        dup2                      // [i, length, i, max, length]

        0x20                      // [32, i, length, i, max, length]
        mul                       // [i*32, length, i, max, length]
        lt                        // [1 | 0, i, max, length]
        iszero finish jumpi       // [i, max, length]  

        dup1                      // [i, i, max, length] 
        0x20                      // [32, i, i, max, length] 
        mul                       // [i*32, i, max, length]
        0x44                      // [0x44, i*32, i, max, length] 
        add                       // [0x44*i*32, i, max, length]
        calldataload              // [arr[i], i, max, length]

        dup1                      // [arr[i], arr[i], i, max, length] 
        dup4                      // [max, arr[i], arr[i], i, max, length]
        swap1                     // [arr[i], max, arr[i], i, max, length]
        gt                        // [1 | 0, arr[i], i, max, length]
        iszero to_loop_start jumpi// [arr[i], i, max, length]

        swap2                     // [max, i, arr[i], length]
        to_loop_start jump        // [max, i, newMax, length]


    to_loop_start:
        pop                       // [i, max, length]
        0x1                       // [1, i, max, length]
        add                       // [i+1, max, length]
        loopStart jump            // [newIndex, max, length]

    finish:
        pop                       // [max] 
        push0 mstore              // 
        0x20 push0 return         // 

    _revert:
        0x00 0x00 revert          
}




#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr           

    __FUNC_SIG(maxOfArray) eq  
    maxOfArray jumpi     

    0x00 0x00 revert

    maxOfArray:
        MAX_OF_ARRAY()
}