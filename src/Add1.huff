/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)

#define macro ADD1() = takes(0) returns(0) {
    0x04 calldataload   // [value] - load value from calldata (skip selector)
                        // Stack: [value]

    0x01 add            // [value+1] - add 1 to the value on the stack
                        // Stack: [value+1]

    0x00 mstore         // [] - store the result (value+1) in memory at location 0x00
                        // Stack: [empty] (mstore consumes the top two stack items)

    0x20 0x00 return    // return 32 bytes starting from memory location 0x00
                        // Stack: [empty] (return consumes the top two stack items)
}

#define macro MAIN() = takes(0) returns(0) {
    // Get function selector
    0x00 calldataload    // [calldata]
    0xe0 shr             // [selector]

    // Check selector
    __FUNC_SIG(add1) eq  // [is_add1]
    add1 jumpi           // Jump if selector matches

    0x00 0x00 revert     // если селектор не совпал

    add1:
       ADD1()
}