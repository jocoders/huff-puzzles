/** 
 *  MY_CREATOR HUFF EXERCISE
 *
 *  The task is to write within the `MAIN` and `CONSTRUCTOR` macros below.
 *
 *  `CONSTRUCTOR` stores the deployer's address in the state variable.
 *  `MAIN` returns the address of its deployer.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function getMyCreator() payable returns(address)

// STORAGE
#define constant DEPLOYER = FREE_STORAGE_POINTER()


#define macro CONSTRUCTOR() = takes(0) returns(0) {
    caller                      // [caller] - Push the address of the caller (deployer) onto the stack
                                // Stack: [caller]
    [DEPLOYER]                  // [DEPLOYER, caller] - Push the storage key for the deployer's address onto the stack
                                // Stack: [DEPLOYER, caller]
    sstore                      // [] - Store the caller's address at the storage key DEPLOYER
                                // Stack: [empty] (sstore consumes the top two stack items: value and key)
}

#define macro GET_MY_CREATOR() = takes(0) returns(0) {
    [DEPLOYER]                  // [DEPLOYER] - Push the storage key for the deployer's address onto the stack
                                // Stack: [DEPLOYER]
    sload                       // [deployer_address] - Load the value stored at the storage key DEPLOYER
                                // Stack: [deployer_address]
    0x00 mstore                 // [] - Store the loaded address in memory at offset 0x00
                                // Stack: [empty] (mstore consumes the top two stack items: value and memory address)
    0x20 0x00 return            // Return 32 bytes starting from memory location 0x00
                                // Stack: [empty] (return consumes the top two stack items: size and start position)
}

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr

    dup1 __FUNC_SIG(getMyCreator) eq getMyCreator jumpi

    0x00 0x00 revert

    getMyCreator:
        GET_MY_CREATOR()
}


