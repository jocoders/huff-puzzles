
/** 
 *  SIMPLE_STORE HUFF EXERCISE
 *
 *  One of the storage locations available to devs when writing smart contracts is Storage. Its persistent and expensive
 *  
 *  The task is to write within the `MAIN` macro below, 2 functions...
 *      - One named `store()` that takes one function argument and stores it in storage slot 0,
 *      - the second named `read()` that simply returns what is stored at storage slot 0.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function store(uint256) payable returns()
#define function read() payable returns(uint256)

#define macro STORE() = takes(0) returns(0) {
    0x04 calldataload            // [value] - Load the value from calldata starting at offset 4 onto the stack
                                // Stack: [value]
    0x00                        // [0, value] - Push the storage slot index 0 onto the stack
                                // Stack: [0, value]

    sstore                      // [] - Store the value at storage slot 0
                                // Stack: [empty] (sstore consumes the top two stack items: value and key)
}

#define macro READ() = takes(0) returns(0) {
    0x00                        // [0] - Push the storage slot index 0 onto the stack
                                // Stack: [0]

    sload                       // [value] - Load the value from storage slot 0
                                // Stack: [value]

    0x00 mstore                 // [] - Store the loaded value in memory at offset 0
                                // Stack: [empty] (mstore consumes the top two stack items: value and memory address)

    0x20 0x00 return            // Return 32 bytes starting from memory location 0
                                // Stack: [empty] (return consumes the top two stack items: size and start position)
}


#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr

    dup1 __FUNC_SIG(store) eq store jumpi
    dup1 __FUNC_SIG(read) eq read jumpi

    0x00 0x00 revert

    store:
        STORE()

    read:
        READ()
}